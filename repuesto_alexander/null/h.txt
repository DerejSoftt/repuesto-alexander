from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from decimal import Decimal

class Proveedor(models.Model):
   nombre_empresa = models.CharField(
       max_length=200,
       verbose_name="Nombre de la Empresa",
       help_text="Nombre oficial de la empresa proveedora"
   )
   contacto = models.CharField(
       max_length=100,
       verbose_name="Persona de Contacto",
       help_text="Nombre de la persona de contacto",
       blank=True
   )
   telefono = models.CharField(
       max_length=20,
       verbose_name="Teléfono",
       help_text="Número de teléfono del proveedor",
       blank=True
   )
   email = models.EmailField(
       verbose_name="Correo Electrónico",
       help_text="Dirección de correo electrónico",
       blank=True
   )
   direccion = models.TextField(
       verbose_name="Dirección",
       help_text="Dirección física del proveedor",
       blank=True
   )
   activo = models.BooleanField(
       default=True,
       verbose_name="Activo",
       help_text="Indica si el proveedor está activo"
   )
   fecha_creacion = models.DateTimeField(
       auto_now_add=True,
       verbose_name="Fecha de Creación"
   )

   class Meta:
       db_table = 'proveedores'
       verbose_name = "Proveedor"
       verbose_name_plural = "Proveedores"
       ordering = ['nombre_empresa']

   def __str__(self):
       return self.nombre_empresa

class CategoriaProducto(models.Model):
   CATEGORIA_CHOICES = [
       ('smartphone', 'Smartphone'),
       ('tablet', 'Tablet'),
       ('smartwatch', 'Smartwatch'),
       ('auriculares', 'Auriculares'),
       ('cargador', 'Cargador'),
       ('cable', 'Cable'),
       ('funda', 'Funda'),
       ('protector', 'Protector de Pantalla'),
       ('bateria', 'Batería'),
       ('repuesto', 'Repuesto'),
   ]
   
   codigo = models.CharField(
       max_length=20,
       choices=CATEGORIA_CHOICES,
       unique=True,
       verbose_name="Código de Categoría",
       help_text="Código único de la categoría"
   )
   nombre = models.CharField(
       max_length=50,
       verbose_name="Nombre de la Categoría",
       help_text="Nombre descriptivo de la categoría"
   )
   descripcion = models.TextField(
       blank=True,
       verbose_name="Descripción",
       help_text="Descripción detallada de la categoría"
   )
   activo = models.BooleanField(
       default=True,
       verbose_name="Activo",
       help_text="Indica si la categoría está activa"
   )

   class Meta:
       db_table = 'categorias_producto'
       verbose_name = "Categoría de Producto"
       verbose_name_plural = "Categorías de Producto"
       ordering = ['nombre']

   def __str__(self):
       return self.nombre

class Marca(models.Model):
   MARCA_CHOICES = [
       ('apple', 'Apple'),
       ('samsung', 'Samsung'),
       ('xiaomi', 'Xiaomi'),
       ('huawei', 'Huawei'),
       ('oppo', 'OPPO'),
       ('vivo', 'Vivo'),
       ('realme', 'Realme'),
       ('oneplus', 'OnePlus'),
       ('motorola', 'Motorola'),
       ('lg', 'LG'),
       ('sony', 'Sony'),
       ('nokia', 'Nokia'),
       ('google', 'Google'),
       ('otros', 'Otros'),
   ]
   
   codigo = models.CharField(
       max_length=20,
       choices=MARCA_CHOICES,
       unique=True,
       verbose_name="Código de Marca",
       help_text="Código único de la marca"
   )
   nombre = models.CharField(
       max_length=50,
       verbose_name="Nombre de la Marca",
       help_text="Nombre comercial de la marca"
   )
   activo = models.BooleanField(
       default=True,
       verbose_name="Activo",
       help_text="Indica si la marca está activa"
   )

   class Meta:
       db_table = 'marcas'
       verbose_name = "Marca"
       verbose_name_plural = "Marcas"
       ordering = ['nombre']

   def __str__(self):
       return self.nombre

class Entrada(models.Model):
   numero_factura = models.CharField(
       max_length=50,
       unique=True,
       verbose_name="Número de Factura",
       help_text="Número único de la factura de entrada"
   )
   fecha_entrada = models.DateField(
       verbose_name="Fecha de Entrada",
       help_text="Fecha en que se recibió la mercancía"
   )
   proveedor = models.ForeignKey(
       Proveedor,
       on_delete=models.PROTECT,
       verbose_name="Proveedor",
       help_text="Proveedor asociado a esta entrada"
   )
   ncf = models.CharField(
       max_length=11,
       blank=True,
       verbose_name="NCF",
       help_text="Número de Comprobante Fiscal (opcional)"
   )
   observaciones = models.TextField(
       blank=True,
       verbose_name="Observaciones",
       help_text="Observaciones adicionales sobre la entrada"
   )
   fecha_creacion = models.DateTimeField(
       auto_now_add=True,
       verbose_name="Fecha de Creación"
   )

   class Meta:
       db_table = 'entradas'
       verbose_name = "Entrada"
       verbose_name_plural = "Entradas"
       ordering = ['-fecha_entrada', '-fecha_creacion']

   def __str__(self):
       return f"Entrada {self.numero_factura} - {self.proveedor.nombre_empresa}"

class DetalleEntrada(models.Model):
   CAPACIDAD_CHOICES = [
       ('16GB', '16 GB'),
       ('32GB', '32 GB'),
       ('64GB', '64 GB'),
       ('128GB', '128 GB'),
       ('256GB', '256 GB'),
       ('512GB', '512 GB'),
       ('1TB', '1 TB'),
       ('2TB', '2 TB'),
   ]

   ESTADO_CHOICES = [
       ('nuevo', 'Nuevo'),
       ('usado-excelente', 'Usado - Excelente'),
       ('usado-bueno', 'Usado - Bueno'),
       ('usado-regular', 'Usado - Regular'),
       ('reacondicionado', 'Reacondicionado'),
       ('defectuoso', 'Defectuoso'),
   ]

   COLOR_CHOICES = [
       ('negro', 'Negro'),
       ('blanco', 'Blanco'),
       ('gris', 'Gris'),
       ('azul', 'Azul'),
       ('rojo', 'Rojo'),
       ('verde', 'Verde'),
       ('amarillo', 'Amarillo'),
       ('rosa', 'Rosa'),
       ('morado', 'Morado'),
       ('dorado', 'Dorado'),
       ('plateado', 'Plateado'),
       ('transparente', 'Transparente'),
   ]

   entrada = models.ForeignKey(
       Entrada,
       on_delete=models.CASCADE,
       related_name='detalles',
       verbose_name="Entrada",
       help_text="Entrada a la que pertenece este detalle"
   )
   categoria_producto = models.ForeignKey(
       CategoriaProducto,
       on_delete=models.PROTECT,
       verbose_name="Categoría de Producto",
       help_text="Categoría del producto"
   )
   marca = models.ForeignKey(
       Marca,
       on_delete=models.PROTECT,
       verbose_name="Marca",
       help_text="Marca del producto"
   )
   modelo = models.CharField(
       max_length=100,
       verbose_name="Modelo",
       help_text="Modelo específico del producto"
   )
   capacidad = models.CharField(
       max_length=10,
       choices=CAPACIDAD_CHOICES,
       blank=True,
       verbose_name="Capacidad/Almacenamiento",
       help_text="Capacidad de almacenamiento del producto (opcional)"
   )
   imei = models.CharField(
       max_length=15,
       unique=True,
       verbose_name="IMEI/Serial",
       help_text="Número IMEI o serial único del producto"
   )
   estado = models.CharField(
       max_length=20,
       choices=ESTADO_CHOICES,
       verbose_name="Estado del Producto",
       help_text="Condición física del producto"
   )
   color = models.CharField(
       max_length=15,
       choices=COLOR_CHOICES,
       blank=True,
       verbose_name="Color",
       help_text="Color del producto (opcional)"
   )
   cantidad = models.PositiveIntegerField(
       default=1,
       validators=[MinValueValidator(1)],
       verbose_name="Cantidad",
       help_text="Cantidad de productos de este tipo"
   )
   costo_compra = models.DecimalField(
       max_digits=10,
       decimal_places=2,
       validators=[MinValueValidator(Decimal('0.01'))],
       verbose_name="Costo de Compra",
       help_text="Costo unitario de compra sin ITBIS"
   )
   tasa_itbis = models.DecimalField(
       max_digits=5,
       decimal_places=2,
       default=Decimal('18.00'),
       validators=[MinValueValidator(Decimal('0.00')), MaxValueValidator(Decimal('100.00'))],
       verbose_name="Tasa ITBIS (%)",
       help_text="Porcentaje de ITBIS aplicado"
   )
   costo_venta = models.DecimalField(
       max_digits=10,
       decimal_places=2,
       validators=[MinValueValidator(Decimal('0.01'))],
       verbose_name="Costo de Venta",
       help_text="Precio de venta al público"
   )
   fecha_creacion = models.DateTimeField(
       auto_now_add=True,
       verbose_name="Fecha de Creación"
   )

   class Meta:
       db_table = 'detalles_entrada'
       verbose_name = "Detalle de Entrada"
       verbose_name_plural = "Detalles de Entrada"
       ordering = ['-fecha_creacion']

   def __str__(self):
       return f"{self.marca.nombre} {self.modelo} - {self.imei}"

   @property
   def monto_itbis(self):
       """Calcula el monto de ITBIS: costo_compra * tasa_itbis / 100"""
       return (self.costo_compra * self.tasa_itbis / 100).quantize(Decimal('0.01'))

   @property
   def costo_total(self):
       """Calcula el costo total: costo_compra + monto_itbis"""
       return (self.costo_compra + self.monto_itbis).quantize(Decimal('0.01'))

   @property
   def margen_ganancia(self):
       """Calcula el margen de ganancia: ((costo_venta - costo_total) / costo_total) * 100"""
       if self.costo_total > 0:
           return (((self.costo_venta - self.costo_total) / self.costo_total) * 100).quantize(Decimal('0.01'))
       return Decimal('0.00')

   @property
   def ganancia_unitaria(self):
       """Calcula la ganancia unitaria: costo_venta - costo_total"""
       return (self.costo_venta - self.costo_total).quantize(Decimal('0.01'))

   def save(self, *args, **kwargs):
       # Convertir IMEI a mayúsculas y eliminar espacios
       if self.imei:
           self.imei = self.imei.upper().replace(' ', '')
       
       # Convertir NCF a mayúsculas si existe
       if hasattr(self.entrada, 'ncf') and self.entrada.ncf:
           self.entrada.ncf = self.entrada.ncf.upper().replace(' ', '')
       
       super().save(*args, **kwargs)